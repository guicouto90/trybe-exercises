//Resumo conteudo 24.2

Updates complexos em Arrays

//OPERADOR PUSH
$push => adiciona um valor a um array, se o campo nao existir no documento, um novo array é criado.
* MODIFICADORES DO OPERADOR $PUSH:
- $each => adiciona multiplos valores a um array
- $slice : Limita o número de elementos do array . Requer o uso do modificador $each ;
- $sort : Ordena os elementos do array . Requer o uso do modificador $each ;
- $position : Especifica a posição do elemento que está sendo inserido no array . Também requer o modificador $each . Sem o modificador $position , o operador $push adiciona o elemento no final do array .
* ORDEM DE EXCUCAO DOS MODIFICADORES:
1 - Altera o array;
2 - Aplica a ordenacao - $sort;
3 - Limite o array - $slice;
4 - Armazena o array.

EXEMPLOS:
use sales;
db.supplies.updateOne(
  { _id: 1 },
  {
push: {
      items: {
        "name": "notepad",
        "price":  35.29,
        "quantity": 2,
      },
    },
  },
  { upsert: true },
);
Resultado:
{
    _id : 1,
    items : [
        {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
        },
    ],
}
Adicionando multiplos valores:
db.supplies.updateOne(
  {},
  {
push: {
      items: {
each: [
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
        ],
      },
    },
  },
  { upsert: true },
);
Resultado:
{
    _id : 1,
    items : [
        {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
        },
        {
            "name" : "pens",
            "price" : 56.12,
            "quantity" : 5,
        },
        {
            "name" : "envelopes",
            "price" : 19.95,
            "quantity" : 8,
        },
    ],
}

Múltiplos modificadores
db.supplies.updateOne(
  { _id: 1 },
  {
push: {
      items: {
each: [
          {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
        ],
sort: { quantity: -1 },
slice: 2,
      },
    },
  },
  { upsert: true },
);

Resultado: 
Foi selecionado o modificador $sort no documento quantity em ordem decrescente -1 e limitado para manter os dois primeiros elementos ordenados com o modificador $slice.
{
  _id : 1,
  items : [
    {
      "name" : "envelopes",
      "price" : 19.95,
      "quantity" : 8,
    },
    {
      "name" : "pens",
      "price" : 56.12,
      "quantity" : 5,
    },
  ],
}

//OPERADOR $POP
$pop => remove o primeiro ou o ultimo elemento do array. Se passar -1 remove o primeiro, e o valor 1, remove o ultimo.
EXEMPLO:
- Antes:
{
  _id: 1,
  items: [
    {
      "name" : "notepad",
      "price" : 35.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
}
Removendo o primeiro elemento: 
db.supplies.updateOne({ _id: 1 }, { $pop: { items: -1 } });
Resultado:
{
  _id: 1,
  items: [
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
}
Removendo o ultimo elemento:
db.supplies.updateOne({ _id: 1 }, { $pop: { items: 1 } });
{
  _id: 1,
  items: [
    {
      "name" : "notepad",
      "price" : 35.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
  ],
}

//OPERADOR $PULL
$pull => remove de um array existente todos os elementos com um ou mais valores que atendam à condição especificada.
EXEMPLOS:
- Antes:
{
  _id: 1,
  items: [
    {
      "name" : "notepad",
      "price" : 35.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
},
{
  _id: 2,
  items: [
    {
      "name" : "pencil",
      "price" : 5.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "backpack",
      "price": 80.12,
      "quantity": 1,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
}

Removendo itens:
db.supplies.updateMany(
  {},
  {
pull: {
      items: {
        name: { $in: ["pens", "envelopes"] },
      },
    },
  },
);
Resultado:
{
  _id : 1,
  items : [
    {
      "name" : "notepad",
      "price" : 35.29,
      "quantity" : 2,
    },
  ],
},
{
  _id : 2,
  items : [
    {
      "name" : "pencil",
      "price" : 5.29,
      "quantity" : 2,
    },
    {
      "name" : "backpack",
      "price" : 80.12,
      "quantity" : 1,
    },
  ],
}

Removendo todos os itens que atendem a uma condição diretamente no $pull
{ _id: 1, votes: [3, 5, 6, 7, 7, 8] }
db.profiles.updateOne(
  { _id: 1 },
  {
pull: {
      votes: { $gte: 6 },
    },
  },
);
Resultado: { _id: 1, votes: [3,  5] }

Removendo itens em um array de Documentos
{
  _id: 1,
  results: [
    { item: "A", score: 5 },
    { item: "B", score: 8, comment: "Strongly agree" },
  ],
},
{
  _id: 2,
  results: [
    { item: "C", score: 8, comment: "Strongly agree" },
    { item: "B", score: 4 },
  ],
}
db.survey.updateMany(
  {},
  {
pull: {
      results: { score: 8 , item: "B" },
    },
  },
);
Resultado: 
{
  _id: 1,
  results: [ { "item": "A", "score": 5 } ],
},
{
  _id: 2,
  results: [
    { "item": "C", "score": 8, "comment": "Strongly agree" },
    { "item": "B", "score": 4 },
  ],
}

//OPERADOR $ADDTOSET
$addToSet => utilizado para garantir que os valores do array nao sejam duplicados;
* 3 aspectos para utilizar o $addToSet:
1 - Se você utilizá-lo em um campo que não existe no documento alterado, ele criará um campo do tipo array com o valor especificado na operação;
2 - Se você utilizá-lo em um campo já existente no documento, mas esse campo não for um array , a operação não funcionará;
3 - Se o valor passado for um documento, o MongoDB o considerará como duplicado se um documento existente no array for exatamente igual ao documento a ser adicionado, ou seja, possui os mesmos campos com os mesmos valores, e esses campos estão na mesma ordem.

EXEMPLO:
{
  _id: 1,
  item: "polarizing_filter",
  tags: ["electronics", "camera"],
}
Adicionando ao array:
db.inventory.updateOne(
  { _id: 1 },
  { $addToSet: { tags: "accessories" } },
);
Resultado:
{
  _id: 1,
  item: "polarizing_filter",
  tags: [
    "electronics",
    "camera",
    "accessories",
  ],
}
Se o valor existir
db.inventory.updateOne(
  { _id: 1 },
  { $addToSet: { tags: "camera"  } },
);
Resultado: { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 0 }
E continua a mesma coisa.

Com o modificador $each
{ _id: 2, item: "cable", tags: ["electronics", "supplies"] }
db.inventory.updateOne(
  { _id: 2 },
  {
addToSet: {
      tags: {
each: ["camera", "electronics", "accessories"],
      },
    },
  },
);
Resultados:
{
  _id: 2,
  item: "cable",
  tags: ["electronics", "supplies", "camera", "accessories"],
}

//ARRAY FILTERS
arrayFilters => Utilizado caso vc nao saiba o index exato do elemento que vc quer modificar.
EXEMPLOS:
Antes:
db.recipes.insertMany([
  {
    title: "Panqueca Simples",
    ingredients: [
      { name: "Farinha", quantity: 2},
      { name: "Oleo", quantity: 4 },
      { name: "Leite", quantity: 1 },
    ],
  },
  {
    title: "Bolo de Cenoura",
    ingredients: [
      { name: "Farinha", quantity: 2},
      { name: "Oleo", quantity: 1, unit: "xícara" },
      { name: "Ovo", quantity: 3},
      { name: "Cenoura", quantity: 3},
      { name: "Fermento", quantity: 1},
    ],
  },
]);
- Sem utilizar o arrayFilters:
db.recipes.updateOne( { title: "Panqueca Simples" }, { $set: { "ingredients.1.unit": "xícara" } } );
- Com arrayFilters:
db.recipes.updateOne(
  { title: "Panqueca Simples" },
  {
set : {
      "ingredients.$[elemento].name": "Farinha Integral",
    },
  },
  { arrayFilters: [ { "elemento.name": "Farinha" } ] },
);
Outro exemplo:
db.recipes.updateOne(
  { title: "Panqueca Simples" },
  {
set : {
      "ingredients.$[elemento].unit": "xícara",
    },
  },
  { arrayFilters: [ { "elemento.name": "Farinha Integral" } ] },
);
Os dois exemplos poderiam ter sido feitos da seguinte maneira tambem:
db.recipes.updateMany( // Passamos de updateOne para updateMany.
  {}, // Retiramos a restrição do título.
  {
set : {
      "ingredients.$[elemento].unit": "xícara", // Setamos `unit` como "xícara",
      "ingredients.$[elemento].name": "Farinha Integral", // `name` como "Farinha Integral".
    },
  },
  { arrayFilters: [ { "elemento.name": "Farinha" } ] }, // Filtramos os arrays que o valor da propriedade `name` seja "Farinha".
);
