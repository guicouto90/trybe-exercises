RESUMO 24.3 - UPDATES COMPLEXOS - ARRAYS

//Operador $all
* $all: O operador $all seleciona todos os documentos em que o valor do campo é um array que contenha todos os elementos especificados.
EXEMPLO:
db.inventory.find({ tags: ["red", "blank"] }); = Retorna o documento onde o array seja exatamente dessa forma, onde a ordem importa;

db.inventory.find({ tags: { $all: ["red", "blank"] } }); = Retorna o documento onde tenha algum dos dois elementos buscados; ele se equivale ao operador $and;

//Operador $elemMatch
* $elemMatch: O operador $elemMatch seleciona os documentos que contêm um campo do tipo array com pelo menos um elemento que satisfaça todos os critérios de seleção especificados.
EXEMPLO:
DB: 
{ _id: 1, results: [82, 85, 88] },
{ _id: 2, results: [75, 88, 89] }

db.scores.find(
  { results: { $elemMatch: { $gte: 80, $lt: 85 } } }
);
Retorna: { _id: 1, results: [82, 85, 88] } => Ele retorna o documento inteiro onde apenas 1 resultado satisfaça a querry;

//Operador $size
* $size: O operador $size seleciona documentos em que um array contenha um número de elementos especificado.
EXEMPLO:
DB:
{ _id: 1, tags: ["red", "green"] },
{ _id: 2, tags: ["apple", "lime"] },
{ _id: 3, tags: "fruit" },
{ _id: 4, tags: ["orange", "lemon", "grapefruit"] }

db.products.find(
  { tags: { $size: 2 } }
);
Retorna:
{ _id: 1, tags: ["red", "green"] },
{ _id: 2, tags: ["apple", "lime"] },
Somente esses dois documentos tem o tamanho do array igual a 2;

//Operador $expr
* $expr: O operador $expr permite que você utilize expressões de agregação e construa queries que comparem campos no mesmo documento.
EXEMPLO:
DB:
{ _id: 1, category: "food", budget: 400, spent: 450 },
{ _id: 2, category: "drinks", budget: 100, spent: 150 },
{ _id: 3, category: "clothes", budget: 100, spent: 50 },
{ _id: 4, category: "misc", budget: 500, spent: 300 },
{ _id: 5, category: "travel", budget: 200, spent: 650 }

db.monthlyBudget.find(
  {
expr: { $gt: [ "$spent", "$budget" ] }
  }
);

Retorna:
{ "_id" : 1, "category" : "food", "budget" : 400, "spent" : 450 }
{ "_id" : 2, "category" : "drinks", "budget" : 100, "spent" : 150 }
{ "_id" : 5, "category" : "travel", "budget" : 200, "spent" : 650 }
É retornado todos os documentos onde o campot "spent" é maior que o campo "budget".

//Operador $regex
* $regex: O operador $regex fornece os "poderes" das expressões regulares ( regular expressions ) para seleção de strings.
EXEMPLO:
DB:
{ _id: 100, sku: "abc123", description: "Single line description." },
{ _id: 101, sku: "abc789", description: "First line\nSecond line" },
{ _id: 102, sku: "xyz456", description: "Many spaces before     line" },
{ _id: 103, sku: "xyz789", description: "Multiple\nline description" }

db.products.find({ sku: { $regex: /789$/ } }); = SELECT * FROM products WHERE sku LIKE "%789"; = Retorna onde o campo sku termina com 789:
{ _id: 101, sku: "abc789", description: "First line\nSecond line" };

db.products.find({ sku: { $regex: /^ABC/i } });
Retorna todos os campos sku onde começam com abc, e o "i" significa "case-insensitive", onde é ignorado se é maiusculo ou minusculo.
{ "_id" : 100, "sku" : "abc123", "description" : "Single line description." }
{ "_id" : 101, "sku" : "abc789", "description" : "First line\nSecond line" }

//Operador $text
* $text: O operador $text faz uma busca "textual" em um campo indexado por um text index. 
Sintaxe:
{
text:
    {
	search: <string>,
	language: <string>, = opcional
	caseSensitive: <boolean>, = opcional, default é false
	diacriticSensitive: <boolean> = opcional, default é false
    }
}
db.articles.createIndex({ subject: "text" });
EXEMPLO:
DB:
{ _id: 1, subject: "coffee", author: "xyz", views: 50 },
{ _id: 2, subject: "Coffee Shopping", author: "efg", views: 5 },
{ _id: 3, subject: "Baking a cake", author: "abc", views: 90  },
{ _id: 4, subject: "baking", author: "xyz", views: 100 },
{ _id: 5, subject: "Café Com Leite", author: "abc", views: 200 },
{ _id: 6, subject: "Сырники", author: "jkl", views: 80 },
{ _id: 7, subject: "coffee and cream", author: "efg", views: 10 },
{ _id: 8, subject: "Cafe com Leite", author: "xyz", views: 10 }

db.articles.find({ $text: { $search: "coffee" } }); => Busca todos os documentos ondem contenham o termo "coffee";
db.articles.find({ $text: { $search: "bake coffee cake" } }); => Busca todos os documento onde contenham qualquer um dos três termos;
db.articles.find({ $text: { $search: "\"coffee shop\"" } }); => Busca todos os documentos onde onhetam a frase "coffee shop";

//Operador $mod
* $mod: operador $mod , que seleciona todos os documentos em que o valor do campo dividido por um divisor seja igual ao valor especificado (ou seja, executa a operação matemática módulo). Operação módulo: encontra o resto da divisão de um número por outro.
EXEMPLO:
DB:
{ _id: 1, item: "abc123", qty: 0 },
{ _id: 2, item: "xyz123", qty: 5 },
{ _id: 3, item: "ijk123", qty: 12 }

db.inventory.find({ qty: { $mod: [4, 0] } });
Retorna:
{ "_id" : 1, "item" : "abc123", "qty" : 0 }
{ "_id" : 3, "item" : "ijk123", "qty" : 12 }
Retorna todos os valores onde o numero dividido por 4 terá o resto 0 => $mod: [4,0];


