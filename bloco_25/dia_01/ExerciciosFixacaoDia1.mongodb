use('agg_example');
db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// Exercicios fixação:
//1 - Selecione todas as transações feitas pelo cliente chamado "Dave America".
use('agg_example');
db.transactions.aggregate(
  [ { $match: {from: "Dave America" } } ]
);
//2 - Selecione todas as transações com o valor entre 700 e 6000, ou que sejam recebidas pela cliente "Lisa Simpson".
use('agg_example');
db.transactions.aggregate(
  [ { $match: {
      $or: [
        {value: {$gt: 700, $lt: 6000}},
        {to: "Lisa Simpson"}
      ] } } ]
);
//3 - Selecione três transações com o valor acima de 1000.
use('agg_example');
db.transactions.aggregate([  
    { 
      $match: { 
        value: { $gt: 1000 },
      },
    },
    { 
      $limit: 3,
    },
]);

//Operador $PROJECT:
use("agg_example")
db.transactions.aggregate([
  { $project: { _id: 0, bank: 1, value: 1, } }
]);

//Exercios fixação $GROUP
//1 - Selecione todos os bancos, ou seja, valores do campo bank ;
use("agg_example")
db.transactions.aggregate([
  { $group: { _id: "$bank", bank: { $sum: 1 } } }
]);
//2 - Selecione o valor total das transações em cada banco e quantas são;
use("agg_example")
db.transactions.aggregate([
  {$group: {
    _id: "$bank", transactions: {$sum: 1}, total: { $sum: "$value" }
  }}
])
//3 - Selecione o valor total de transações por banco;
use("agg_example")
db.transactions.aggregate([
  {$group: {
    _id: "$bank", total: { $sum: "$value" }
  }}
])
//4 - Selecione os bancos que têm o valor total de transações maior que 1000.
use("agg_example");
db.transactions.aggregate([
  {$group: {_id: "$bank", total: { $sum: "$value" } } },
  {$match: {total: {$gt: 1000 } } }
])

//EXERCICIOS FIXAÇÃO LOOKUP:
use("agg_example");
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

//1 - Selecione todos os clientes com as suas respectivas transações feitas;
use('agg_example');
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "from",
      as: "transactions_history"
    },
  },
]);
//2 - Selecione quatro clientes com as suas respectivas transações recebidas;
use('agg_example');
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name", //CAMPO DE COMPARACAO
      foreignField: "to",
      as: "transactions_history"
    },
  },
  {
    $limit: 4,
  },
]);
//3 - Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
use('agg_example');
db.clients.aggregate([
  {
    $match: { State: 'Florida' },
  },
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "transactions_history"
    },
  },
]);
