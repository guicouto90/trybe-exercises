//Resumo 25.1 - Aggregation Framework - Parte 1
Exemplo do metodo aggregate:
db.orders.aggregate([
  { $match: { status: "A" } }, = é pesquisado todos os documentos onde o "status = A": $match.
  { $group: { _id: "$cust_id", total: { $sum: "$amount" } } } = $group: onde o cust_id for igual, é somado o campo amount deles e retornado
]);


//OPERADOR $MATCH:
$match: O estágio representado pelo operador $match filtra os documentos da mesma maneira que os filtros no método find({ $match }).É recomendado sempre priorizar o $match o mais "cedo" possível no pipeline.
EXEMPLO:
db.articles.insertMany([
{ _id: ObjectId("512bc95fe835e68f199c8686"), author: "dave", score: 80, views: 100 },
{ _id: ObjectId("512bc962e835e68f199c8687"), author: "dave", score: 85, views: 521 },
{ _id: ObjectId("55f5a192d4bede9ac365b257"), author: "ahn", score: 60, views: 1000 },
{ _id: ObjectId("55f5a192d4bede9ac365b258"), author: "li", score: 55, views: 5000 },
{ _id: ObjectId("55f5a1d3d4bede9ac365b259"), author: "annT", score: 60, views: 50 },
{ _id: ObjectId("55f5a1d3d4bede9ac365b25a"), author: "li", score: 94, views: 999 },
{ _id: ObjectId("55f5a1d3d4bede9ac365b25b"), author: "ty", score: 95, views: 1000 }
]);
Exemplo 1: Igualdade simples
db.articles.aggregate(
  [{ $match : { author : "dave" } }]
);
RETORNA:
{ _id: ObjectId("512bc95fe835e68f199c8686"), author: "dave", score: 80, views: 100 }
{ _id: ObjectId("512bc962e835e68f199c8687"), author: "dave", score: 85, views: 521 }
Exemplo 2: Igualdade complexa
db.articles.aggregate(
  [
    {
match: {
or: [
          { score: { $gt: 70, $lt: 90 } },
          { views: { $gte: 1000 } }
        ]
      }
    }
  ]
);
RETORNA:
{ "_id" : ObjectId("512bc95fe835e68f199c8686"), "author" : "dave", "score" : 80, "views" : 100 }
{ "_id" : ObjectId("512bc962e835e68f199c8687"), "author" : "dave", "score" : 85, "views" : 521 }
{ "_id" : ObjectId("55f5a192d4bede9ac365b257"), "author" : "ahn", "score" : 60, "views" : 1000 }
{ "_id" : ObjectId("55f5a192d4bede9ac365b258"), "author" : "li", "score" : 55, "views" : 5000 }
{ "_id" : ObjectId("55f5a1d3d4bede9ac365b25b"), "author" : "ty", "score" : 95, "views" : 1000 }

//OPERADOR $LIMIT
$limit: limita o número de documentos que será passado para o próximo estágio do pipeline. Ele sempre recebe um valor do tipo inteiro e positivo.
EXEMPLO:
//3 - Selecione três transações com o valor acima de 1000.
use('agg_example');
db.transactions.aggregate([  
    { 
      $match: { 
        value: { $gt: 1000 },
      },
    },
    { 
      $limit: 3,
    },
]);


//OPERADOR $PROJECT
$project: tem como uma de suas funções passar adiante no pipeline apenas alguns campos dos documentos vindos do estágio anterior, fazendo isso por meio de uma "projeção", como no método find({}, { $project }) . 
Mas aqui temos uma diferença: esses campos podem ser novos, sendo resultado de um cálculo ou de uma concatenação.
EXEMPLOS:
Exemplo 1: Incluindo campos específicos
db.books.aggregate(
  [
    {
project : {
        title : 1,
        author : 1
      }
    }
  ]
);
Exemplo 2: Excluindo o campo _id
db.books.aggregate([
  {
project : {
      _id: 0,
      title : 1,
      author : 1
    }
  }
]);
Exemplo 3: Excluindo outros campos
db.books.aggregate([
  {
project : {
      copies: 0 => Exclui apenas esse campo.
    }
  }
]);
Exemplo 4: Excluindo campos em subdocumentos
db.books.aggregate([
  {
project : {
      "author.first": 0,
      copies: 0
    }
  }
]);

Exemplo 5: Incluindo campos calculados
db.books.aggregate([
  {
project: {
      title: 1,
      isbn: {
        prefix: { $substr: ["$isbn", 0, 3] },
        group: { $substr: ["$isbn", 3, 2] },
        publisher: { $substr: ["$isbn", 5, 4] },
        title: { $substr: ["$isbn", 9, 3] },
        checkDigit: { $substr: ["$isbn", 12, 1] }
      },
      lastName: "$author.last",
      copiesSold: "$copies"
    }
  }
]);

Retorno: NÃO ENTENDI, pesquisar mais tarde.
{
  "_id" : 1,
  "title" : "A Fundação",
  "isbn" : {
    "prefix" : "000",
    "group" : "11",
    "publisher" : "2222",
    "title" : "333",
    "checkDigit" : "4"
  },
  "lastName" : "Asimov",
  "copiesSold" : 5
}

//OPERADOR $GROUP
$group: agrupar valores de diversas formas.
Operadores de acumulção do $group:
- addToSet : retorna um array com os valores únicos da expressão para cada grupo;
- $avg : retorna a média de valores numéricos. Valores não numéricos são ignorados;
- $first : retorna um valor do primeiro documento de cada grupo;
- $last : retorna um valor do último documento de cada grupo;
- $max : retorna o maior valor de cada grupo;
- $sum : retorna a soma de valores numéricos. Valores não numéricos são ignorados.
EXEMPLOS:
DB:
db.sales.insertMany([
{
  _id: 1,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("2"),
  date: ISODate("2014-03-01T08:00:00Z")
},
{
  _id: 2,
  item: "O Homem e Seus Símbolos",
  price: NumberDecimal("20"),
  quantity: NumberInt("1"),
  date: ISODate("2014-03-01T09:00:00Z")
},
{
  _id: 3,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity: NumberInt( "10"),
  date: ISODate("2014-03-15T09:00:00Z")
},
{
  _id: 4,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity:  NumberInt("20"),
  date: ISODate("2014-04-04T11:21:39.736Z")
},
{
  _id: 5,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("10"),
  date: ISODate("2014-04-04T21:23:13.331Z")
},
{
  _id: 6,
  item:"A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("5" ),
  date: ISODate("2015-06-04T05:08:13Z")
},
{
  _id: 7,
  item: "A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("10"),
  date: ISODate("2015-09-10T08:43:00Z")
},
{
  _id: 8,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("5" ),
  date: ISODate("2016-02-06T20:20:13Z")
}
])

Exemplo 1: Contando o número de documentos
db.sales.aggregate([
  {
group: {
      _id: null, = Retorna todos os documentos
      count: { $sum: 1 } = soma 1 no campo count, que acabou de ser criado.
    }
  }
]);
Retorna:
{ "_id" : null, "count" : 8 }

Exemplo 2: Retornando valores distintos
db.sales.aggregate([
  {
$group : {
      _id : "$item", = onde o campo item for igual
      count: { $sum: 1} =  se somará mais um no campo count.
    }
  }
]);
Retorna:
{ "_id" : "A Coragem de Ser Imperfeito", "count" : 2 }
{ "_id" : "O Homem e Seus Símbolos", "count" : 1 }
{ "_id" : "Código Limpo", "count" : 3 }
{ "_id" : "Comunicação Não-Violenta", "count" : 2 }

Exemplo 3: Somando Valores
db.sales.aggregate([
  {
group : {
      _id : "$item", = items iguais
      totalSaleAmount: { = novo campo
        $sum: {
	  $multiply: ["$price", "$quantity"] multiplicará o price pela quantity;
        }
      }
    }
  }
]);
Retorna:
{ "_id" : "A Coragem de Ser Imperfeito", "totalSaleAmount" : NumberDecimal("112.5") }
{ "_id" : "O Homem e Seus Símbolos", "totalSaleAmount" : NumberDecimal("20") }
{ "_id" : "Código Limpo", "totalSaleAmount" : NumberDecimal("170") }
{ "_id" : "Comunicação Não-Violenta", "totalSaleAmount" : NumberDecimal("150") }

Exemplo 4: Having (do Mysql), combinando estágios no aggregate
db.sales.aggregate([
  // Primeiro Estágio
  {
group: {
      _id : "$item",
      totalSaleAmount: {
sum: {
multiply: ["$price", "$quantity"]
        }
      }
    }
  },
  // Segundo Estágio
  {
match: { "totalSaleAmount": { $gte: 100 } }
  }
]);

Retorna: 
{ "_id" : "A Coragem de Ser Imperfeito", "totalSaleAmount" : NumberDecimal("112.5") }
{ "_id" : "Código Limpo", "totalSaleAmount" : NumberDecimal("170") }
{ "_id" : "Comunicação Não-Violenta", "totalSaleAmount" : NumberDecimal("150") }

Exemplo 5: Agrupando por null
db.sales.aggregate([
  {
group : {
      _id : null,
      totalSaleAmount: {
sum: { $multiply: ["$price", "$quantity"] }
      },
      averageQuantity: { $avg: "$quantity" },
      count: { $sum: 1 }
    }
  }
]);

Retorna:
{
  "_id" : null,
  "totalSaleAmount" : NumberDecimal("452.5"),
  "averageQuantity" : 7.875,
  "count" : 8
}

//OPERADOR $UNWIND
$unwind: "desconstrói" um campo array do documento de entrada e gera como saída um documento para cada elemento do array.
EXEMPLO:
db.inventory.insertOne({ _id: 7, item: "ABC1", sizes: ["S", "M", "L"] });
db.inventory.aggregate([{ $unwind : "$sizes" }]);
RETORNA:
{ "_id" : 7, "item" : "ABC1", "sizes" : "S" }
{ "_id" : 7, "item" : "ABC1", "sizes" : "M" }
{ "_id" : 7, "item" : "ABC1", "sizes" : "L" }

//OPERADOR $LOOKUP
$lookup:  é possível juntar documentos de outra coleção ( join ). Como resultado dessa junção, um elemento do tipo array é adicionado a cada documento da coleção de entrada, contendo os documentos que deram "match" na coleção com a qual se faz o "join"
PARAMETROS DO LOOKUP:
- from : uma coleção no mesmo database para executar o join ;
- localField : o campo da coleção de onde a operação de agregação está sendo executada. Será comparado por igualdade com o campo especificado no parâmetro foreignField ;
- foreignField : o campo da coleção especificada no parâmetro from que será comparado com o campo localField por igualdade simples;
- as : o nome do novo array que será adicionado.

EXEMPLO:
DBS:
// orders
db.orders.insertMany([
{ _id: 1, item: "almonds", price: 12, quantity: 2 },
{ _id: 2, item: "pecans", price: 20, quantity: 1 },
{ _id: 3 }
])

// inventory
db.inventory.insertMany([
{ _id: 1, sku: "almonds", description: "product 1", instock: 120 },
{ _id: 2, sku: "bread", description: "product 2", instock: 80 },
{ _id: 3, sku: "cashews", description: "product 3", instock: 60 },
{ _id: 4, sku: "pecans", description: "product 4", instock: 70 },
{ _id: 5, sku: null, description: "Incomplete" },
{ _id: 6 }
])

db.orders.aggregate([
  {
lookup: {
      from: "inventory",
      localField: "item",
      foreignField: "sku",
      as: "inventory_docs"
    }
  }
]);

RETORNA:
{
  "_id" : 1,
  "item" : "almonds",
  "price" : 12,
  "quantity" : 2,
  "inventory_docs" : [
    {
      "_id" : 1,
      "sku" : "almonds",
      "description" : "product 1",
      "instock" : 120
    }
  ]
}
{
  "_id" : 2,
  "item" : "pecans",
  "price" : 20,
  "quantity" : 1,
  "inventory_docs" : [
    {
      "_id" : 4,
      "sku" : "pecans",
      "description" : "product 4",
      "instock" : 70
    }
  ]
}
{
  "_id" : 3,
  "inventory_docs" : [
    {
      "_id" : 5,
      "sku" : null,
      "description" : "Incomplete"
    },
    {
      "_id" : 6
    }
  ]
}

O QUE SERIA IGUAL NO MYSQL:
SELECT * inventory_docs
FROM orders
WHERE inventory_docs IN (
  SELECT *
  FROM inventory
  WHERE sku = orders.item
);

